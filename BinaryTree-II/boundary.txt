#include <bits/stdc++.h>
/************************************************************

    Following is the Binary Tree node structure:

    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/
bool leaf(TreeNode<int>* root){
        return root->left == nullptr && root->right == nullptr;
}
void leftB(TreeNode<int>* root,  vector<int>&tmp){
    TreeNode<int>*cur = root->left;
    while(cur){
        if(!leaf(cur))tmp.push_back(cur->data);
        if(cur->left) cur = cur->left;
        else cur = cur->right;
    }
}
void downB(TreeNode<int>* root, vector<int>&tmp){
  if (leaf(root)) {
        tmp.push_back(root->data);
        return;
    }

    if(root->left) downB(root->left, tmp);
    if(root->right) downB(root->right, tmp);
}
void rightB(TreeNode<int>* root, vector<int>&tmp){
    TreeNode<int>*cur = root->right;
    vector<int>rev;
    while(cur){
        if(!leaf(cur))rev.push_back(cur->data);
        if(cur->right) cur = cur->right;
        else cur = cur->left;
    }
    reverse(rev.begin(), rev.end());
    tmp.insert(tmp.end(),rev.begin(), rev.end());
}

vector<int> traverseBoundary(TreeNode<int>* root){
    vector<int>ans;
    // vector<int>tmp;
    if(!root) return ans;
    if(!leaf(root))ans.push_back(root->data);
    leftB(root, ans);
    downB(root, ans);
    rightB(root, ans);
    return ans;
}