//bit masking
#include <bits/stdc++.h>

using namespace std;

void solve(vector<vector<int>>&ans,vector<vector<int>>&res,int left,int ld,int ud,int n,int col)
{
    if(col==n)
    {
        vector<int>temp;
        for(auto it:res)
        {
            for(auto j:it)
                temp.push_back(j);
        }
        ans.push_back(temp);
        return;
    }
    for(int row=0;row<n;row++)
    {
        if((left&1<<row)==0 && (ld&1<<n-1+col-row)==0 && (ud&1<<row+col)==0)
        {
            left |= (1<<row);
            ld |= (1<<(n-1+col-row));
            ud |= (1<<(row+col));
            res[row][col]=1;
            solve(ans,res,left,ld,ud,n,col+1);
            left &= ~(1<<row);
            ld &= ~(1<<(n-1+col-row));
            ud &= ~(1<<(row+col));
            res[row][col]=0;
        }
    }
}

vector<vector<int>> solveNQueens(int n) {
    vector<vector<int>>ans;
    vector<vector<int>>res(n,vector<int>(n));
    if(n>1 &&n<4)return ans;
    int left =0, ud = 0, ld = 0;
    solve(ans,res,left,ld,ud,n,0);
    return ans;
}
//bool vector
#include <bits/stdc++.h>

using namespace std;

void solve(vector<vector<int>>&ans,vector<vector<int>>&res,int left,int ld,int ud,int n,int col)
{
    if(col==n)
    {
        vector<int>temp;
        for(auto it:res)
        {
            for(auto j:it)
                temp.push_back(j);
        }
        ans.push_back(temp);
        return;
    }
    for(int row=0;row<n;row++)
    {
        if((left&1<<row)==0 && (ld&1<<n-1+col-row)==0 && (ud&1<<row+col)==0)
        {
            left |= (1<<row);
            ld |= (1<<(n-1+col-row));
            ud |= (1<<(row+col));
            res[row][col]=1;
            solve(ans,res,left,ld,ud,n,col+1);
            left &= ~(1<<row);
            ld &= ~(1<<(n-1+col-row));
            ud &= ~(1<<(row+col));
            res[row][col]=0;
        }
    }
}

vector<vector<int>> solveNQueens(int n) {
    vector<vector<int>>ans;
    vector<vector<int>>res(n,vector<int>(n));
    if(n>1 &&n<4)return ans;
    int left =0, ud = 0, ld = 0;
    solve(ans,res,left,ld,ud,n,0);
    return ans;
}