//bit masking
#include <bits/stdc++.h> 
vector<vector<int>> uniqueSubsets(int n, vector<int> &arr)
{
    vector<vector<int>> subsets;
    sort(arr.begin(), arr.end());

    // Trying all subsets.
    for (int mask = 0; mask < (1<<n); mask++){

        vector<int> cur;
        bool unique = true;
        for (int i = 0; i < n; i++){

            if (( mask & (1<<i) ) == 0){
                // Bit not set.
                continue;
            }

            if (i > 0 && arr[i] == arr[i-1] && (mask & (1<<(i-1))) == 0 ){
                unique = false;
            }

            if (unique == false){
                break;
            }
            
            // Inserting arr[i] to current subset.
            cur.push_back(arr[i]);
        }

        if (unique) {
          subsets.push_back(cur);
        }
    }
        sort(subsets.begin(), subsets.end());
    return subsets;
}

// backtracking
#include <bits/stdc++.h> 
void subset(vector<int>, int, int, vector<int>, set<vector<int>>&);
vector<vector<int>> uniqueSubsets(int n, vector<int> &nums)
{
    // Write your code here.
    // int n  = nums.size();
        set<vector<int>>st;
        vector<vector<int>>ans;
        vector<int>ar;
        subset(nums, n, 0, ar, st);
        for(auto arr : st){
            ans.push_back(arr);
        }
        return ans;
}

    void subset(vector<int>nums, int n, int i, vector<int>ar, set<vector<int>>&st){
        //base case 
        if(i >= n) {
            sort(ar.begin(), ar.end());
            st.insert(ar);
            return;
        }
        subset(nums, n, i+1, ar, st);
        //include
        ar.push_back(nums[i]);
        subset(nums, n, i+1, ar, st);
        ar.pop_back();
    }
